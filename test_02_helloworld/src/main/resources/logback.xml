<?xml version="1.0" encoding="UTF-8"?>
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。 
	当scan为true时，此属性生效。默认的时间间隔为1分钟。 debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds"
	debug="false">
	<!-- 每个logger都关联到logger上下文，默认上下文名称为“default”。 但可以使用contextName标签设置成其他名字，用于区分不同应用程序的记录，如打印日志如下中xiaobaiai 
		10:39:28.964 xiaobaiai [main] DEBUG c.x.Test02HelloworldApplication - 简单的日志记录测试 
		: 1 + 2 = 3 -->
	<contextName>xiaobaiai</contextName>

	<!-- property用来定义变量值的标签，property标签有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值 
		这里定义了log.path这个变量，下面会有引用这个变量 -->
	<property name="log.path"
		value="/Users/Ethanm/Documents/spring-log" />

	<!--输出到控制台 -->
	<appender name="console"
		class="ch.qos.logback.core.ConsoleAppender">
		<!-- 定义过滤器，ERROR级别 -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>INFO</level>
		</filter>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName %magenta([%thread]) %highlight(%-5level) %logger{36}.%M - %msg%n</pattern>
		</encoder>
	</appender>

	<!--输出到文件 -->
	<appender name="file"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 最新的log文件 -->
		<file>${log.path}/log_newest.log</file>
		<encoder>
			<!-- ％d-以SimpleDateFormat允许的格式输出日志消息发生的时间 ％thread-输出发生日志消息的线程的名称。 $-5level-输出日志消息的日志记录级别。 
				％logger{36}-输出发生日志消息的包+类名。括号内的数字表示包+类名的最大长度。 ％M-输出发生日志消息的方法的名称（性能较差，不建议生成环境使用） 
				％msg-输出实际的日志消息 ％magenta()-将括号中包含的输出的颜色设置为洋红色（其他颜色可用）。 %highlight()-将括号中包含的输出颜色设置为取决于日志记录级别（例如ERROR 
				= red） -->
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %magenta([%thread]) %highlight(%-5level) %logger{36}.%M - %msg%n</pattern>
		</encoder>
		<!-- 日志文件分割设置 -->
		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>
				${log.path}/log_%d{yyyy-MM-dd}_%i.log
			</fileNamePattern>
			<maxFileSize>3KB</maxFileSize>
			<!-- 只保存最近10天日志 -->
			<maxHistory>10</maxHistory>
			<!-- 定义日志文件上限，如果所有日志超过这个大小，则会删除旧的日志 -->
			<totalSizeCap>100MB</totalSizeCap>
		</rollingPolicy>
	</appender>

	<!-- root是根logger,不能有name和additivity属性，是有一个level -->
	<!-- appender是一个日志打印的组件，这里组件里面定义了打印过滤的条件、打印输出方式、滚动策略、编码方式、打印格式等 如果我们不使用一个logger或者root的appender-ref指定某个具体的appender时，它就不会生效 -->
	<root level="info">
		<appender-ref ref="console" />
		<appender-ref ref="file" />
	</root>

	<!-- logger标记用来设置某一个包或者具体的某一个类的日志打印级别以及指定appender -->
	<logger name="com.xiaobaiai" level="WARN" additivity="false">
		<appender-ref ref="console" />
	</logger>
</configuration>